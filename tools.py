import json
import logging
from pathlib import Path
from typing import List, Dict, Any

from google.adk.tools import FunctionTool, ToolContext
from pydantic import BaseModel, Field

from .util import get_client, save_image_from_bytes

logger = logging.getLogger(__name__)


class GenerateImageRequest(BaseModel):
    """Request model for image generation."""
    prompt: str = Field(description="The text prompt for image generation")
    aspect_ratio: str = Field(default="1:1", description="Aspect ratio of the image (e.g., '1:1', '16:9')")
    output_filename: str = Field(description="Filename for the generated image")


class GenerateImageResponse(BaseModel):
    """Response model for image generation."""
    success: bool = Field(description="Whether image generation was successful")
    image_path: str = Field(description="Path to the generated image file")
    error_message: str = Field(default="", description="Error message if generation failed")


def generate_image(request: GenerateImageRequest, tool_context: ToolContext) -> GenerateImageResponse:
    """
    Generate an image using Imagen 3.0 based on a text prompt.
    
    Args:
        request: GenerateImageRequest containing prompt and configuration
        tool_context: ADK ToolContext for session state access
        
    Returns:
        GenerateImageResponse with success status and image path
    """
    try:
        logger.info(f"Generating image with prompt: '{request.prompt[:50]}...'")
        
        # Initialize client
        client = get_client()
        
        # Configure image generation
        config = {
            "number_of_images": 1,
            "aspect_ratio": request.aspect_ratio,
            "output_mime_type": "image/jpeg",
            "person_generation": "ALLOW_ADULT"
        }
        
        # Generate image using Imagen
        result = client.models.generate_images(
            model="models/imagen-3.0-generate-002",
            prompt=request.prompt,
            config=config
        )
        
        if not result.generated_images:
            return GenerateImageResponse(
                success=False,
                image_path="",
                error_message="No images were generated by the API"
            )
        
        # Create output directory
        output_dir = Path("output/images")
        output_dir.mkdir(parents=True, exist_ok=True)
        
        # Save the generated image
        image_bytes = result.generated_images[0].image.image_bytes
        image_path = output_dir / request.output_filename
        save_image_from_bytes(image_bytes, str(image_path))
        
        logger.info(f"Image successfully generated and saved to '{image_path}'")
        
        # Store the image path in session state
        if tool_context:
            tool_context.session_state["last_generated_image"] = str(image_path)
            logger.info(f"Stored image path in session state: {str(image_path)}")
        
        return GenerateImageResponse(
            success=True,
            image_path=str(image_path),
            error_message=""
        )
        
    except Exception as e:
        error_msg = f"Error generating image: {str(e)}"
        logger.error(error_msg, exc_info=True)
        return GenerateImageResponse(
            success=False,
            image_path="",
            error_message=error_msg
        )


class GenerateMultipleImagesRequest(BaseModel):
    """Request model for generating multiple images."""
    prompts: List[str] = Field(description="List of text prompts for image generation")
    aspect_ratio: str = Field(default="1:1", description="Aspect ratio for all images")
    output_prefix: str = Field(default="image", description="Prefix for output filenames")


class GenerateMultipleImagesResponse(BaseModel):
    """Response model for multiple image generation."""
    success: bool = Field(description="Whether all images were generated successfully")
    image_paths: List[str] = Field(description="Paths to the generated image files")
    error_message: str = Field(default="", description="Error message if generation failed")


def generate_multiple_images(request: GenerateMultipleImagesRequest, tool_context: ToolContext) -> GenerateMultipleImagesResponse:
    """
    Generate multiple images using Imagen 3.0 based on a list of text prompts.
    
    Args:
        request: GenerateMultipleImagesRequest containing prompts and configuration
        tool_context: ADK ToolContext for session state access
        
    Returns:
        GenerateMultipleImagesResponse with success status and image paths
    """
    try:
        logger.info(f"Generating {len(request.prompts)} images")
        
        # Initialize client
        client = get_client()
        
        # Configure image generation
        config = {
            "number_of_images": 1,
            "aspect_ratio": request.aspect_ratio,
            "output_mime_type": "image/jpeg",
            "person_generation": "ALLOW_ADULT"
        }
        
        # Create output directory
        output_dir = Path("output/images")
        output_dir.mkdir(parents=True, exist_ok=True)
        
        image_paths = []
        
        for i, prompt in enumerate(request.prompts):
            try:
                logger.info(f"Generating image {i+1}/{len(request.prompts)}: '{prompt[:50]}...'")
                
                # Generate image using Imagen
                result = client.models.generate_images(
                    model="models/imagen-3.0-generate-002",
                    prompt=prompt,
                    config=config
                )
                
                if not result.generated_images:
                    logger.warning(f"No image generated for prompt {i+1}")
                    continue
                
                # Save the generated image
                image_bytes = result.generated_images[0].image.image_bytes
                filename = f"{request.output_prefix}_{i+1}.jpg"
                image_path = output_dir / filename
                save_image_from_bytes(image_bytes, str(image_path))
                image_paths.append(str(image_path))
                
                logger.info(f"Image {i+1} saved to '{image_path}'")
                
            except Exception as e:
                logger.error(f"Error generating image {i+1}: {str(e)}")
                continue
        
        if not image_paths:
            return GenerateMultipleImagesResponse(
                success=False,
                image_paths=[],
                error_message="No images were successfully generated"
            )
        
        logger.info(f"Successfully generated {len(image_paths)} images")
        
        # Store the image paths in session state
        if tool_context:
            tool_context.session_state["generated_images"] = image_paths
            logger.info(f"Stored {len(image_paths)} image paths in session state")
        
        return GenerateMultipleImagesResponse(
            success=True,
            image_paths=image_paths,
            error_message=""
        )
        
    except Exception as e:
        error_msg = f"Error generating multiple images: {str(e)}"
        logger.error(error_msg, exc_info=True)
        return GenerateMultipleImagesResponse(
            success=False,
            image_paths=[],
            error_message=error_msg
        )


def get_session_info(tool_context: ToolContext) -> str:
    """
    Get information about the current session state.
    
    Args:
        tool_context: ADK ToolContext for session state access
        
    Returns:
        String representation of session state
    """
    if not tool_context:
        return "No tool context available"
    
    session_state = tool_context.session_state
    info = []
    
    if "generated_script" in session_state:
        info.append(f"Script: {session_state['generated_script'][:100]}...")
    
    if "image_prompts" in session_state:
        prompts = session_state["image_prompts"]
        if isinstance(prompts, str):
            info.append(f"Image Prompts: {prompts[:100]}...")
        else:
            info.append(f"Image Prompts: {len(prompts)} prompts available")
    
    if "generated_images" in session_state:
        images = session_state["generated_images"]
        info.append(f"Generated Images: {len(images)} images")
        for i, img_path in enumerate(images[:3], 1):
            info.append(f"  {i}. {img_path}")
        if len(images) > 3:
            info.append(f"  ... and {len(images) - 3} more")
    
    if "last_generated_image" in session_state:
        info.append(f"Last Image: {session_state['last_generated_image']}")
    
    return "\n".join(info) if info else "No session data available"


# Create function tools
generate_image_tool = FunctionTool(
    description="Generate a single image using Imagen 3.0 based on a text prompt",
    function=generate_image
)

generate_multiple_images_tool = FunctionTool(
    description="Generate multiple images using Imagen 3.0 based on a list of text prompts",
    function=generate_multiple_images
)

session_info_tool = FunctionTool(
    description="Get information about the current session state including scripts, prompts, and generated images",
    function=get_session_info
)

# Export all tools
__all__ = ["generate_image_tool", "generate_multiple_images_tool", "session_info_tool"] 